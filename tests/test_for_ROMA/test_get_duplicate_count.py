import pytest
import requests
import re


URL = "https://qaconnect.crossb.ru/get_duplicate_count"
API_KEY = "88333900"
HEADERS = {
    "Test-Authorization": API_KEY,
    "Content-Type": "application/json"
}

def get_api_response(input_string):
    data = {"stroka": input_string}
    response = requests.post(URL, headers=HEADERS, json=data)
    assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å –∫–æ–¥ 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
    return response

def check_input_data_field(result, input_string):
    assert "input_data" in result, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'input_data' –≤ –æ—Ç–≤–µ—Ç–µ"
    assert result["input_data"] == input_string, f"–û–∂–∏–¥–∞–ª–æ—Å—å input_data: {input_string}, –ø–æ–ª—É—á–µ–Ω–æ: {result['input_data']}"

def check_count_field(result, expected_count):
    assert "count" in result, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'count' –≤ –æ—Ç–≤–µ—Ç–µ"
    assert result["count"] == expected_count, f"–û–∂–∏–¥–∞–ª–æ—Å—å count: {expected_count}, –ø–æ–ª—É—á–µ–Ω–æ: {result['count']}"

def check_date_field(result):
    assert "date" in result, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'date' –≤ –æ—Ç–≤–µ—Ç–µ"
    assert re.match(r"^\d{4}_\d{2}_\d{2} \d{2}:\d{2}:\d{2}$", result["date"]), f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {result['date']}"


@pytest.mark.parametrize("input_string,expected_count", [
    ("xexe", 2),
    ("axaxxax", 4),
    ("aaaaa", 5),
    ("0123#@+‚Äî/_:0'0;12,.21", 3),
    (" —Ö–µ—Ö–µ—Ö–µ —Ö–µ—Ö–µ—Ö–µ  ", 6),
    ("—Ö—Ö", 2),
    ("—Ö–µ", 0),
    ("", 0),
    ("üôÇüôÇüôÇ", 3),
    ("üôÇüôÉüôÇ", 2),
    ("–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è0123456789", 0),
    ("abcdefghijklmnopqrstuvwxyz0123456789", 0),
    ("—ë", 0),
    ("AaAaAaAa", 8),
    ("—Ö–µ" * 106, 106)
])


def test_check_api_duplicate_count(input_string, expected_count):
    response = get_api_response(input_string)

    result = response.json()
    check_input_data_field(result, input_string)
    check_count_field(result, expected_count)
    check_date_field(result)


def test_empty_body(): # —Ç–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –±–æ–¥–∏: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    response = requests.post(URL, headers=HEADERS, json={})
    assert response.status_code == 422, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 422, –ø–æ–ª—É—á–µ–Ω {response.status_code}"

    result = response.json()
    assert "detail" in result, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'detail' –≤ –æ—Ç–≤–µ—Ç–µ"
    assert isinstance(result["detail"], list), f"'detail' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, –ø–æ–ª—É—á–µ–Ω–æ {type(result['detail'])}"

    error = result["detail"][0]
    assert "loc" in error and error["loc"] == ["body", "stroka"], f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ loc: {error.get('loc')}"
    assert "msg" in error and "required" in error["msg"].lower(), f"–û–∂–∏–¥–∞–ª–æ—Å—å —Å–ª–æ–≤–æ 'required', –ø–æ–ª—É—á–µ–Ω–æ: {error.get('msg')}"
    assert "type" in error and "missing" in error["type"], f"–û–∂–∏–¥–∞–ª—Å—è type='missing', –ø–æ–ª—É—á–µ–Ω–æ: {error.get('type')}"


def test_wrong_field_name(): # —Ç–µ—Å—Ç –Ω–∞ "–º—É—Å–æ—Ä–Ω—ã–µ" –¥–∞–Ω–Ω—ã–µ: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 422
    data = {"string": "test"} # —Ç—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "stroka"
    response = requests.post(URL, headers=HEADERS, json=data)
    assert response.status_code == 422, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 422, –ø–æ–ª—É—á–µ–Ω {response.status_code}"

    result = response.json()
    assert "detail" in result, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'detail' –≤ –æ—Ç–≤–µ—Ç–µ"
    assert isinstance(result["detail"], list), f"'detail' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, –ø–æ–ª—É—á–µ–Ω–æ {type(result['detail'])}"

    error = result["detail"][0]
    assert "loc" in error and error["loc"] == ["body", "stroka"], f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ loc: {error.get('loc')}"
    assert "msg" in error and "required" in error["msg"].lower(), f"–û–∂–∏–¥–∞–ª–æ—Å—å —Å–ª–æ–≤–æ 'required', –ø–æ–ª—É—á–µ–Ω–æ: {error.get('msg')}"
    assert "type" in error and "missing" in error["type"], f"–û–∂–∏–¥–∞–ª—Å—è type='missing', –ø–æ–ª—É—á–µ–Ω–æ: {error.get('type')}"



@pytest.mark.parametrize("headers,expected_status,is_bug", [
    (
        HEADERS, 200, False  # —É—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    ),
    (
        None, 401, False  # –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    ),
    (
        {"Test-Authorization": "invalid_auth_value", "Content-Type": "application/json"},
        401, True  # –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–±–∞–≥ - —Å–µ–π—á–∞—Å 200, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 401)
    ),
    (
        {"Wrong-Authorization-Key": API_KEY, "Content-Type": "application/json"},
        401, False  # –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á
    ),
    (
        {"Wrong-Authorization-Header": "completely_wrong_value", "Content-Type": "application/json"},
        401, False  # –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    ),
])

def test_authorization(headers, expected_status, is_bug):
    data = {"stroka": "test"}

    response = requests.post(URL, headers=headers if headers else None, json=data)

    result = response.json()

    if is_bug and response.status_code != expected_status:
        pytest.fail(f"–ò–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥: –æ–∂–∏–¥–∞–ª—Å—è {expected_status}, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
    assert response.status_code == expected_status, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å {expected_status}, –ø–æ–ª—É—á–µ–Ω {response.status_code}"

    if expected_status == 200:
        assert "count" in result
    else:
        assert "detail" in result
        error_text = result["detail"].lower()
        assert "not authenticated" in error_text or "—Ç–æ–∫–µ–Ω" in error_text, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {result['detail']}"
